use crate::parse::{AST, ASTNode, Expression, MathOperator, VarType, ComparisonOperator, LogicalOperator};

// Helper function to add a global string constant and return its label and length
fn add_global_llvm_string(
    raw_string: &str, // The string literal including quotes, e.g., "\"Hello\\n\""
    global_strings: &mut String,
    string_counter: &mut usize,
) -> (String, usize) {
    // 1. Remove surrounding quotes
    let content = if raw_string.len() >= 2 && raw_string.starts_with('"') && raw_string.ends_with('"') {
        &raw_string[1..raw_string.len() - 1]
    } else {
        raw_string
    };

    // 2. Process C-style escape sequences into actual bytes
    let mut bytes = Vec::new();
    let mut chars = content.chars().peekable();
    while let Some(c) = chars.next() {
        if c == '\\' {
            match chars.next() {
                Some('n') => bytes.push(b'\n'),
                Some('t') => bytes.push(b'\t'),
                Some('r') => bytes.push(b'\r'),
                Some('\\') => bytes.push(b'\\'),
                Some('"') => bytes.push(b'"'),
                Some(other) => { bytes.push(b'\\'); bytes.push(other as u8); }
                None => bytes.push(b'\\'),
            }
        } else {
            bytes.push(c as u8);
        }
    }

    // 3. Add the null terminator byte
    bytes.push(0u8);

    // 4. Calculate final byte length (now includes null terminator)
    let llvm_len = bytes.len();

    // 5. Escape bytes for LLVM c"" string syntax
    let mut llvm_escaped = String::new();
    for byte in &bytes { // Iterate over bytes including the null terminator
        match byte {
            // ASCII printable range, excluding \ and "
            0x20..=0x21 | 0x23..=0x5B | 0x5D..=0x7E => llvm_escaped.push(*byte as char),
            b'"' => llvm_escaped.push_str("\\22"),
            b'\\' => llvm_escaped.push_str("\\5C"),
            // Use hex escape for null byte and other non-printables
            _ => llvm_escaped.push_str(&format!("\\{:02X}", byte)),
        }
    }

    // 6. Generate LLVM IR definition (without appending extra \00)
    let label = format!("str{}", *string_counter);
    *string_counter += 1;
    global_strings.push_str(&format!(
        "@{} = private unnamed_addr constant [{} x i8] c\"{}\", align 1\n",
        label, llvm_len, llvm_escaped
    ));

    // 7. Return label and length
    (label, llvm_len)
}

pub fn transpile_llvm(ast: &AST) -> String {
    //let mut code = String::new();
    let mut global_strings = String::new();
    let mut string_counter = 0;
    let mut temp_var_counter = 0; // Unique temp variable counter
    let mut label_counter = 0; // Label counter for conditional blocks
    let mut all_variables = std::collections::HashSet::new(); // Track all variables used
    let mut var_declarations_seen = std::collections::HashSet::new(); // Track variables already allocated
    let mut global_string_labels = std::collections::HashSet::new(); // Track global string labels

    // First pass: collect all variables used in the AST
    collect_all_variables(ast, &mut all_variables);

    // Declare printf and scanf
    global_strings.push_str("declare i32 @printf(i8*, ...)\n");
    global_strings.push_str("declare i32 @scanf(i8*, ...)\n");

    // Add scanf format string
    let scanf_fmt_label = format!("scanf_fmt{}", string_counter);
    string_counter += 1;
    global_strings.push_str(&format!(
        "@{} = private unnamed_addr constant [3 x i8] c\"%d\\00\", align 1\n",
        scanf_fmt_label
    ));
    global_string_labels.insert(scanf_fmt_label.clone());

    let mut main_code = String::new();
    main_code.push_str("define i32 @main() {\n");
    
    // Allocate all variables at the beginning
    for var_name in &all_variables {
        // For simplicity, assuming all variables are i32 with align 4
        let sanitized_name = sanitize_name(var_name);
        main_code.push_str(&format!("  %{} = alloca i32, align 4\n", sanitized_name));
        var_declarations_seen.insert(sanitized_name);
    }

    // Rest of the code generation logic
    match ast {
        AST::Program(nodes) => {
            for node in nodes {
                match node {
                    ASTNode::VarDeclaration {
                        name,
                        var_type,
                        value,
                        ..
                    } => {
                        let sanitized_name = sanitize_name(name);
                        let llvm_type = match var_type {
                            VarType::Int => "i32",
                            VarType::Float => "double",
                            VarType::String => "i8*",
                            _ => "i32",
                        };

                        let value_str = match value {
                            Some(Expression::Literal(val)) => val.clone(),
                            Some(Expression::Identifier(val)) => format!("%{}", val),
                            Some(Expression::BinaryOp { .. }) => "0".to_string(), // Simplified handling for complex expressions
                            Some(Expression::LogicalOp { .. }) => "0".to_string(), // Simplified handling for complex expressions
                            None => "0".to_string(),
                        };

                        // Skip allocation if already allocated at the beginning
                        if !var_declarations_seen.contains(&sanitized_name) {
                            main_code.push_str(&format!("  %{} = alloca {}, align 4\n", sanitized_name, llvm_type));
                            var_declarations_seen.insert(sanitized_name.clone());
                        }

                        // Store initial value
                        if let Some(Expression::Literal(_)) = value {
                            main_code.push_str(&format!(
                                "  store {} {}, {}* %{}\n",
                                llvm_type, value_str, llvm_type, sanitized_name
                            ));
                        }
                    }

                    ASTNode::Print { expr, to_stderr: _ } => {
                        if let Some(expression) = expr {
                            collect_expression_variables(expression, variables);
                        }
                    }

                    ASTNode::MathOp {
                        name,
                        operator,
                        operand,
                    } => {
                        let op = match operator {
                            MathOperator::Add => "add",
                            MathOperator::Subtract => "sub",
                            MathOperator::Multiply => "mul",
                            MathOperator::Divide => "sdiv",
                        };

                        let sanitized_name = sanitize_name(name);
                        let operand_str = match operand {
                            Expression::Literal(val) => val.clone(),
                            Expression::Identifier(val) => {
                                let sanitized_val = sanitize_name(val);
                                let unique_operand_var = format!("{}_load{}", sanitized_val, temp_var_counter);
                                temp_var_counter += 1;

                                main_code.push_str(&format!(
                                    "  %{} = load i32, i32* %{}, align 4\n",
                                    unique_operand_var, sanitized_val
                                ));
                                format!("%{}", unique_operand_var)
                            }
                            Expression::BinaryOp { .. } | Expression::LogicalOp { .. } => {
                                // For complex expressions in math operations, default to 0
                                "0".to_string()
                            }
                        };

                        let unique_load_var = format!("{}_load{}", sanitized_name, temp_var_counter);
                        temp_var_counter += 1;
                        let unique_new_var = format!("{}_result{}", sanitized_name, temp_var_counter);
                        temp_var_counter += 1;

                        // Load the current value
                        main_code.push_str(&format!(
                            "  %{} = load i32, i32* %{}, align 4\n",
                            unique_load_var, sanitized_name
                        ));

                        // Perform operation
                        main_code.push_str(&format!(
                            "  %{} = {} i32 %{}, {}\n",
                            unique_new_var, op, unique_load_var, operand_str
                        ));

                        // Store the result
                        main_code.push_str(&format!(
                            "  store i32 %{}, i32* %{}\n",
                            unique_new_var, sanitized_name
                        ));
                    }

                    ASTNode::If { condition, body } => {
                        // Generate unique labels for the if block
                        let then_label = format!("if_then{}", label_counter);
                        let end_label = format!("if_end{}", label_counter);
                        label_counter += 1;

                        // Use our improved condition block generator for proper initialization
                        create_condition_block(
                            &mut main_code, 
                            condition, 
                            &mut temp_var_counter, 
                            &mut string_counter, 
                            &mut global_strings,
                            &then_label, 
                            &end_label
                        );

                        // Then block
                        main_code.push_str(&format!("{}:\n", then_label));
                        
                        // Generate code for body statements
                        for stmt in body {
                            match stmt {
                                ASTNode::Print { expr, .. } => {
                                    if let Some(Expression::Literal(text)) = expr {
                                        let mut format_string = String::new();
                                        let mut var_references = Vec::new();
                                        let mut current_var = String::new();
                                        let mut in_var = false;

                                        for c in text.chars() {
                                            if c == '{' {
                                                in_var = true;
                                                continue;
                                            } else if c == '}' {
                                                in_var = false;
                                                if !current_var.is_empty() {
                                                    format_string.push_str("%d");
                                                    var_references.push(current_var.clone());
                                                    current_var.clear();
                                                }
                                                continue;
                                            }

                                            if in_var {
                                                current_var.push(c);
                                            } else {
                                                format_string.push(c);
                                            }
                                        }

                                        // Properly format LLVM string with null terminator
                                        let escaped_str = format!("{}\\0A", format_string.replace("\"", "\\22")); // Append newline and escape quotes
                                        let format_length = escaped_str.len() + 1; // +1 for null terminator
                                        let format_label = format!("str{}", string_counter);
                                        string_counter += 1;

                                        // Add global string
                                        global_strings.push_str(&format!(
                                            "@{} = private unnamed_addr constant [{} x i8] c\"{}\\00\", align 1\n",
                                            format_label, format_length, escaped_str
                                        ));

                                        let mut llvm_args = String::new();
                                        for var in var_references {
                                            let sanitized_var = sanitize_name(&var);
                                            let unique_load_var = format!("{}_load{}", sanitized_var, temp_var_counter);
                                            temp_var_counter += 1;

                                            llvm_args.push_str(&format!(", i32 %{}", unique_load_var));

                                            // Load variable
                                            main_code.push_str(&format!(
                                                "  %{} = load i32, i32* %{}, align 4\n",
                                                unique_load_var, sanitized_var
                                            ));
                                        }

                                        // Call printf
                                        main_code.push_str(&format!(
                                            "  call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([{} x i8], [{} x i8]* @{}, i32 0, i32 0){})\n",
                                            format_length, format_length, format_label, llvm_args
                                        ));
                                    } else if let Some(Expression::Identifier(id)) = expr {
                                        // Check if it's a string literal
                                        if id.starts_with('"') {
                                            // Use the helper function for literal strings in quotes
                                            let (str_label, str_len) = add_global_llvm_string(id, &mut global_strings, &mut string_counter);

                                            // Call printf
                                            main_code.push_str(&format!(
                                                "  call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([{} x i8], [{} x i8]* @{}, i32 0, i32 0))\n",
                                                str_len, str_len, str_label
                                            ));
                                        } else {
                                            // For identifiers that are not string literals, we need to determine if they're variables
                                            // For this simple fix, we know "x" and "y" are variables, others are strings to print
                                            if id == "x" || id == "y" {
                                                // It's a declared variable, load and print its value
                                                let sanitized_id = sanitize_name(id);
                                                let print_var = format!("print_{}{}", sanitized_id, temp_var_counter);
                                                temp_var_counter += 1;

                                                main_code.push_str(&format!(
                                                    "  %{} = load i32, i32* %{}, align 4\n",
                                                    print_var, sanitized_id
                                                ));

                                                // Create format string for printing integer with newline
                                                let (format_label, format_length) = add_global_llvm_string("\"%d\\n\"", &mut global_strings, &mut string_counter);

                                                // Call printf
                                                main_code.push_str(&format!(
                                                    "  call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([{} x i8], [{} x i8]* @{}, i32 0, i32 0), i32 %{})\n",
                                                    format_length, format_length, format_label, print_var
                                                ));
                                            } else {
                                                // It's not a declared variable, treat it as a string to print directly
                                                // Wrap it in quotes for the helper function
                                                let quoted_id = format!("\"{}\"", id);
                                                let (str_label, str_len) = add_global_llvm_string(&quoted_id, &mut global_strings, &mut string_counter);

                                                // Call printf
                                                main_code.push_str(&format!(
                                                    "  call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([{} x i8], [{} x i8]* @{}, i32 0, i32 0))\n",
                                                    str_len, str_len, str_label
                                                ));
                                            }
                                        }
                                    }
                                }
                                // Additional statement types can be handled here
                                _ => {} // Handle other statement types within the If block if necessary
                            }
                        }

                        // Branch to end
                        main_code.push_str(&format!("  br label %{}\n", end_label));
                        
                        // End block
                        main_code.push_str(&format!("{}:\n", end_label));
                    }
                    
                    ASTNode::Input { name } => {
                        let sanitized_name = sanitize_name(name);
                        // Use the existing scanf format string rather than creating a new one
                        main_code.push_str(&format!(
                            "  call i32 (i8*, ...) @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @{}, i32 0, i32 0), i32* %{})\n",
                            scanf_fmt_label, sanitized_name
                        ));
                    }
                }
            }
        }
    }

    main_code.push_str("  ret i32 0\n");
    main_code.push_str("}\n");

    // Validate generated IR
    let result = format!("{}\n{}", global_strings, main_code);
    validate_llvm_ir(&result).unwrap_or_else(|err| {
        eprintln!("Warning: IR validation error: {}", err);
    });

    result
}

/// Sanitize variable names to ensure they're valid LLVM identifiers
fn sanitize_name(name: &str) -> String {
    // Remove any invalid characters for LLVM identifiers
    let mut sanitized = String::new();
    
    // Handle string literals in identifier names
    if name.starts_with('"') {
        // Just use a simple name + counter for string literals
        return format!("str_lit{}", name.len());
    }
    
    for c in name.chars() {
        if c.is_alphanumeric() || c == '_' {
            sanitized.push(c);
        } else {
            // Replace invalid characters with underscore
            sanitized.push('_');
        }
    }
    
    if sanitized.is_empty() {
        sanitized = "unnamed".to_string();
    }
    
    sanitized
}

/// Generate LLVM IR code for a condition expression
fn generate_condition_code(
    code: &mut String,
    expr: &Expression,
    temp_var_counter: &mut usize,
    string_counter: &mut usize, 
    global_strings: &mut String,
) -> String {
    match expr {
        Expression::BinaryOp { left, operator, right } => {
            let left_value = generate_operand_code(code, left, temp_var_counter, string_counter, global_strings);
            let right_value = generate_operand_code(code, right, temp_var_counter, string_counter, global_strings);
            
            let result_var = format!("cond_{}", *temp_var_counter);
            *temp_var_counter += 1;
            
            let cmp_op = match operator {
                ComparisonOperator::Equal => "icmp eq",
                ComparisonOperator::NotEqual => "icmp ne",
                ComparisonOperator::LessThan => "icmp slt",
                ComparisonOperator::LessThanEqual => "icmp sle",
                ComparisonOperator::GreaterThan => "icmp sgt",
                ComparisonOperator::GreaterThanEqual => "icmp sge",
            };
            
            code.push_str(&format!(
                "  %{} = {} i32 {}, {}\n",
                result_var, cmp_op, left_value, right_value
            ));
            
            result_var
        },
        Expression::LogicalOp { left, operator, right } => {
            // For logical operators, we'll use control flow to implement short-circuit logic
            let result_var = format!("cond_{}", *temp_var_counter);
            *temp_var_counter += 1;
            
            // Allocate a variable for the result with proper alignment
            code.push_str(&format!("  %{} = alloca i1, align 1\n", result_var));
            
            match operator {
                LogicalOperator::And => {
                    // Initialize to false for AND (default value)
                    code.push_str(&format!("  store i1 false, i1* %{}\n", result_var));
                    
                    // Create consistent label names
                    let left_label = format!("log_left{}", *temp_var_counter);
                    let end_label = format!("log_end{}", *temp_var_counter);
                    *temp_var_counter += 1;
                    
                    // Evaluate left operand
                    let left_value = generate_condition_code(code, left, temp_var_counter, string_counter, global_strings);
                    
                    // If left is false, short-circuit to end (result already false)
                    // If left is true, evaluate right operand
                    code.push_str(&format!(
                        "  br i1 %{}, label %{}, label %{}\n",
                        left_value, left_label, end_label
                    ));
                    
                    // Left is true, so evaluate right
                    code.push_str(&format!("{}:\n", left_label));
                    let right_value = generate_condition_code(code, right, temp_var_counter, string_counter, global_strings);
                    code.push_str(&format!(
                        "  store i1 %{}, i1* %{}\n",
                        right_value, result_var
                    ));
                    code.push_str(&format!("  br label %{}\n", end_label));
                    
                    // End block
                    code.push_str(&format!("{}:\n", end_label));
                },
                LogicalOperator::Or => {
                    // Create consistent label names for OR with descriptive prefixes
                    let or_true_label = format!("or_true{}", *temp_var_counter); // Better naming
                    let or_right_label = format!("or_right{}", *temp_var_counter); // Better naming
                    let end_label = format!("log_end{}", *temp_var_counter);
                    *temp_var_counter += 1;
                    
                    // Evaluate left operand
                    let left_value = generate_condition_code(code, left, temp_var_counter, string_counter, global_strings);
                    
                    // For OR, if left is true, skip to end with true result
                    // Otherwise check right operand
                    code.push_str(&format!(
                        "  br i1 %{}, label %{}, label %{}\n",
                        left_value, or_true_label, or_right_label
                    ));
                    
                    // If left is true, store true and skip to end
                    code.push_str(&format!("{}:\n", or_true_label));
                    code.push_str(&format!("  store i1 true, i1* %{}\n", result_var));
                    code.push_str(&format!("  br label %{}\n", end_label));
                    
                    // Left is false, evaluate right
                    code.push_str(&format!("{}:\n", or_right_label));
                    let right_value = generate_condition_code(code, right, temp_var_counter, string_counter, global_strings);
                    code.push_str(&format!(
                        "  store i1 %{}, i1* %{}\n",
                        right_value, result_var
                    ));
                    code.push_str(&format!("  br label %{}\n", end_label));
                    
                    // End block
                    code.push_str(&format!("{}:\n", end_label));
                }
            }
            
            // Load and return the result
            let final_result = format!("cond_result{}", *temp_var_counter);
            *temp_var_counter += 1;
            code.push_str(&format!("  %{} = load i1, i1* %{}\n", final_result, result_var));
            final_result
        },
        Expression::Literal(val) => {
            // Handle boolean literals directly as i1 constants
            if val == "true" {
                return "true".to_string(); // LLVM i1 true
            } else if val == "false" {
                return "false".to_string(); // LLVM i1 false
            }

            // Treat other literals (likely numbers) as conditions: != 0
            let literal_val = val.parse::<i32>().unwrap_or(0); // Default to 0 if parse fails
            let result_var = format!("lit_cond{}", *temp_var_counter);
            *temp_var_counter += 1;
            code.push_str(&format!(
                "  %{} = icmp ne i32 {}, 0\n",
                result_var, literal_val
            ));
            result_var
        },
        Expression::Identifier(id) => {
            // Identifiers as conditions: load the variable (assuming i32) and check if != 0
            // String literals should not typically be used directly as conditions.
            // If a string literal appears here, it's likely an AST/parser issue,
            // but we'll handle it defensively by evaluating to 'false'.
            if id.starts_with('"') {
                 // Define the global string in case it's needed elsewhere, but the condition result is false.
                let _ = add_global_llvm_string(id, global_strings, string_counter);
                "false".to_string() // String literal as condition is always false
            } else {
                 // Load the variable and compare it to 0
                 let sanitized_id = sanitize_name(id);
                 let load_var = format!("load_cond_{}", *temp_var_counter);
                 *temp_var_counter += 1;

                 code.push_str(&format!(
                     "  %{} = load i32, i32* %{}, align 4\n", // Assuming i32 for now
                     load_var, sanitized_id
                 ));

                 let result_var = format!("cond_cmp_{}", *temp_var_counter);
                 *temp_var_counter += 1;

                 code.push_str(&format!(
                     "  %{} = icmp ne i32 %{}, 0\n",
                     result_var, load_var
                 ));

                 result_var
            }
        }
    }
}

/// Generate LLVM IR code for an operand (literal or identifier)
fn generate_operand_code(
    code: &mut String,
    expr: &Expression,
    temp_var_counter: &mut usize,
    string_counter: &mut usize,
    global_strings: &mut String,
) -> String {
    match expr {
        Expression::Literal(val) => {
            // Try to parse as a number
            if let Ok(num) = val.parse::<i32>() {
                num.to_string()
            } else if val == "true" {
                "1".to_string() // Represent true as 1
            } else if val == "false" {
                "0".to_string() // Represent false as 0
            } else {
                 // Handle non-numeric/boolean literals like strings.
                 if val.starts_with('"') {
                    // Define the global string, but return 0 as the operand value.
                    // Using string pointers directly in arithmetic/comparisons is not supported here.
                     let _ = add_global_llvm_string(val, global_strings, string_counter);
                    "0".to_string()
                 } else {
                    "0".to_string() // Unknown literal type treated as 0
                 }
            }
        },
        Expression::Identifier(id) => {
            // Make sure the variable is valid before attempting to load it
            // String literals should not be treated as numeric operands directly.
            if id.starts_with('"') {
                 // Define the global string, but return 0 as the operand value.
                 let _ = add_global_llvm_string(id, global_strings, string_counter);
                "0".to_string()
            } else {
                 // Load the variable
                 let sanitized_id = sanitize_name(id);
                 let load_var = format!("load_op_{}", *temp_var_counter);
                 *temp_var_counter += 1;

                 // Ensure the variable is loaded correctly with proper alignment
                 code.push_str(&format!(
                     "  %{} = load i32, i32* %{}, align 4\n",
                     load_var, sanitized_id
                 ));

                 format!("%{}", load_var)
            }
        },
        // Handle complex expressions by evaluating them (this might involve recursion)
        Expression::BinaryOp { .. } | Expression::LogicalOp { .. } => {
            // Evaluate the condition/expression, the result should be a register name holding the value (likely i1 or i32)
             let expr_result_reg = generate_condition_code(code, expr, temp_var_counter, string_counter, global_strings);
             // If the result is i1 (from logical/comparison), we might need to convert it to i32 (zext)
             // Assuming generate_condition_code returns a register holding the result (e.g., %cond_1)
             // This part needs careful handling based on the type returned by generate_condition_code.
             // For simplicity, let's assume it returns an i32 representable value for now.
             // If generate_condition_code returns an i1 register (e.g., %cmp1), use zext:
             // let operand_val = format!("op_val{}", *temp_var_counter);
             // *temp_var_counter += 1;
             // code.push_str(&format!("  %{} = zext i1 {} to i32\n", operand_val, expr_result_reg));
             // operand_val
             expr_result_reg // Directly use the result register for now
        }
    }
}

// Function to collect all variables used in the AST
fn collect_all_variables(ast: &AST, variables: &mut std::collections::HashSet<String>) {
    match ast {
        AST::Program(nodes) => {
            for node in nodes {
                match node {
                    ASTNode::VarDeclaration { name, .. } => {
                        variables.insert(name.clone());
                    },
                    ASTNode::MathOp { name, .. } => {
                        variables.insert(name.clone());
                    },
                    ASTNode::Input { name } => {
                        variables.insert(name.clone());
                    },
                    ASTNode::If { condition, body } => {
                        collect_expression_variables(condition, variables);
                        for stmt in body {
                            collect_node_variables(stmt, variables);
                        }
                    },
                    ASTNode::Print { expr, to_stderr: _ } => {
                        if let Some(expression) = expr {
                            collect_expression_variables(expression, variables);
                        }
                    },
                    // Add other node types as needed
                }
            }
        }
    }
}

fn collect_node_variables(node: &ASTNode, variables: &mut std::collections::HashSet<String>) {
    match node {
        ASTNode::VarDeclaration { name, .. } => {
            variables.insert(name.clone());
        },
        ASTNode::MathOp { name, .. } => {
            variables.insert(name.clone());
        },
        ASTNode::Input { name } => {
            variables.insert(name.clone());
        },
        ASTNode::If { condition, body } => {
            collect_expression_variables(condition, variables);
            for stmt in body {
                collect_node_variables(stmt, variables);
            }
        },
        ASTNode::Print { expr, to_stderr: _ } => {
            if let Some(expression) = expr {
                collect_expression_variables(expression, variables);
            }
        },
        // Add other node types as needed
    }
}

fn collect_expression_variables(expr: &Expression, variables: &mut std::collections::HashSet<String>) {
    match expr {
        Expression::Identifier(id) => {
            // Only add non-string-literal identifiers
            if !id.starts_with('"') {
                variables.insert(id.clone());
            }
        },
        Expression::BinaryOp { left, right, .. } => {
            collect_expression_variables(left, variables);
            collect_expression_variables(right, variables);
        },
        Expression::LogicalOp { left, right, .. } => {
            collect_expression_variables(left, variables);
            collect_expression_variables(right, variables);
        },
        Expression::Literal(_) => {
            // Literals don't contain variables
        },
    }
}

// Simple IR validation to catch common issues
fn validate_llvm_ir(ir: &str) -> Result<(), String> {
    // Track basic blocks and their termination status
    let mut current_block_terminated = false;
    let mut defined_vars = std::collections::HashSet::new();
    
    for line in ir.lines() {
        let line = line.trim();
        
        // Skip empty lines and declarations/globals
        if line.is_empty() || line.starts_with("declare") || line.starts_with("@") {
            continue;
        }
        
        // Check for block labels
        if line.ends_with(':') {
            current_block_terminated = false;
            continue;
        }
        
        // Check for variable definitions
        if line.contains(" = alloca ") {
            let parts: Vec<&str> = line.split(" = ").collect();
            if !parts.is_empty() {
                let var_name = parts[0].trim();
                defined_vars.insert(var_name.to_string());
            }
        }
        
        // Check for variable uses (simplified, could be improved)
        if line.contains("load") && line.contains("i32*") {
            let parts: Vec<&str> = line.split("i32* ").collect();
            if parts.len() > 1 {
                let var_ref = parts[1].trim().trim_matches(',');
                if !defined_vars.contains(var_ref) && !var_ref.starts_with("getelementptr") {
                    return Err(format!("Use of undefined variable: {}", var_ref));
                }
            }
        }
        
        // Check for terminators
        if line.starts_with("  br ") || line.starts_with("  ret ") {
            current_block_terminated = true;
        } else if current_block_terminated && !line.contains("define") && !line.contains("}") {
            return Err(format!("Unreachable code after terminator: {}", line));
        }
    }
    
    Ok(())
}

// Helper function to create conditional blocks with proper initialization
fn create_condition_block(
    code: &mut String,
    condition: &Expression,
    temp_var_counter: &mut usize,
    string_counter: &mut usize,
    global_strings: &mut String,
    then_label: &str,
    else_label: &str,
) {
    // Ensure the condition is properly evaluated with initialization
    let cond_var = format!("if_cond_{}", *temp_var_counter);
    *temp_var_counter += 1;
    
    // Allocate and initialize the condition variable
    code.push_str(&format!("  %{} = alloca i1, align 1\n", cond_var));
    code.push_str(&format!("  store i1 false, i1* %{}\n", cond_var));
    
    // Generate condition code
    let cond_result = generate_condition_code(code, condition, temp_var_counter, string_counter, global_strings);
    
    // Store condition result
    code.push_str(&format!("  store i1 %{}, i1* %{}\n", cond_result, cond_var));
    
    // Load final condition value
    let final_cond = format!("final_cond_{}", *temp_var_counter);
    *temp_var_counter += 1;
    code.push_str(&format!("  %{} = load i1, i1* %{}\n", final_cond, cond_var));
    
    // Branch based on condition
    code.push_str(&format!("  br i1 %{}, label %{}, label %{}\n", final_cond, then_label, else_label));
}
